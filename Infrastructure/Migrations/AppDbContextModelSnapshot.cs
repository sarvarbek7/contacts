// <auto-generated />
using System;
using Contacts.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Contacts.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Contacts.Domain.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_account_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_account_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_account_updated_by_id");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("Contacts.Domain.PhoneNumbers.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("ActiveAssignedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("active_assigned_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_phone_number");

                    b.HasIndex("ActiveAssignedUserId")
                        .HasDatabaseName("ix_phone_number_active_assigned_user_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_phone_number_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_phone_number_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_phone_number_updated_by_id");

                    b.ToTable("phone_number", (string)null);
                });

            modelBuilder.Entity("Contacts.Domain.PhoneNumbers.UserPhoneNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("uuid")
                        .HasColumnName("phone_number_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_phone_number");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_phone_number_created_by_id");

                    b.HasIndex("PhoneNumberId")
                        .HasDatabaseName("ix_user_phone_number_phone_number_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_phone_number_user_id");

                    b.ToTable("user_phone_number", (string)null);
                });

            modelBuilder.Entity("Contacts.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("external_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Photo")
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_account_id");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_external_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Contacts.Domain.Accounts.Account", b =>
                {
                    b.HasOne("Contacts.Domain.Accounts.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_account_account_created_by_id");

                    b.HasOne("Contacts.Domain.Accounts.Account", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_account_account_deleted_by_id");

                    b.HasOne("Contacts.Domain.Accounts.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_account_account_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Contacts.Domain.PhoneNumbers.PhoneNumber", b =>
                {
                    b.HasOne("Contacts.Domain.Users.User", "ActiveAssignedUser")
                        .WithMany()
                        .HasForeignKey("ActiveAssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_phone_number_user_active_assigned_user_id");

                    b.HasOne("Contacts.Domain.Accounts.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_phone_number_account_created_by_id");

                    b.HasOne("Contacts.Domain.Accounts.Account", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_phone_number_account_deleted_by_id");

                    b.HasOne("Contacts.Domain.Accounts.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_phone_number_account_updated_by_id");

                    b.Navigation("ActiveAssignedUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Contacts.Domain.PhoneNumbers.UserPhoneNumber", b =>
                {
                    b.HasOne("Contacts.Domain.Accounts.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_phone_number_account_created_by_id");

                    b.HasOne("Contacts.Domain.PhoneNumbers.PhoneNumber", "PhoneNumber")
                        .WithMany("UsersHistory")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_phone_number_phone_number_phone_number_id");

                    b.HasOne("Contacts.Domain.Users.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_phone_number_user_user_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("PhoneNumber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Contacts.Domain.Users.User", b =>
                {
                    b.HasOne("Contacts.Domain.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Contacts.Domain.Users.User", "AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Contacts.Domain.PhoneNumbers.PhoneNumber", b =>
                {
                    b.Navigation("UsersHistory");
                });

            modelBuilder.Entity("Contacts.Domain.Users.User", b =>
                {
                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
